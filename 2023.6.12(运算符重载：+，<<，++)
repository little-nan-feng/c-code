#include<iostream>
using namespace std;


////+号运算符重载
//class Person
//{
//public:
//	int m_A;
//	int m_B;
//
//	//通过成员函数重载+号运算符
//	//Person operator+(Person &p) 
//	//{
//	//	Person temp;
//	//	temp.m_A = this->m_A + p.m_A;
//	//	temp.m_B = this->m_B + p.m_B;
//	//	return temp;
//	//}
//};
//
////全局函数重定义+号--会与成员函数冲突-只取一个方式
//Person operator+(Person &p1, Person &p2)
//{
//	Person temp;
//	temp.m_A = p1.m_A + p2.m_A;
//	temp.m_B = p1.m_B + p2.m_B;
//	return temp;
//}
//
//
//void test01()
//{
//	Person p1;
//	Person p2;
//	p1.m_A = 10;
//	p1.m_B = 20;
//	p2.m_A = 40;
//	p2.m_B = 20;
//
//	//Person p3 = p1.operator+(p2);//此为本质调用
//	//以上语句可简化为下方的语句-可实现两个自定义数据类型的相加-即为+号重定义
//	//Person p3 = p1 + p2;//此为简化写法
//
//	//Person p3 = operator+(p1, p2);//此为本质调用
//	//以上语句可简化为下方语句
//	Person p3 = p1 + p2;//此为简化写法
//	cout << "p3的m_A值为：" << p3.m_A << endl;
//	cout << "p3的m_B值为：" << p3.m_B << endl;
//}
//
//int main()
//{
//	test01();
//	return 0;
//}
//
////对于内置的数据类型的表达式的运算符是不可以改变的
////不要滥用运算符重载--即乱用



////左移运算符重载  <<
//class Person
//{
////一般不会采用成员函数来重载<<运算符
////public:
//// 	   利用成员函数重载<<运算符   p.operator<<(cout)  简化为 p<<cout  不符合我们的编程思想
//// 	   无法实现cout在左侧，因为需要先有一个对象调用operator函数，导致p在左侧，cout在右侧
////	void operator<<(cout)
////	{
////
////	}
//public:
//	int m_A;
//	int m_B;
//};
//
////只能采用全局函数来重载<<运算符
//ostream & operator<<(ostream &cout,Person &p)//返回类型是引用  cout在整个程序中只能有一个，所以需要采用&方式
////此函数中的cout只是给凑cout函数取得一个别名
//{
//	cout << "m_A= " << p.m_A << " m_B= " << p.m_B;//cout的数据类型为ostream--标准输出流
//	return cout;//返回cout，使得可以进行链式编程
//}
//
//void test01()
//{
//	Person p;
//	p.m_A = 10;
//	p.m_B = 20;
//	cout << p << endl;//因为返回的是cout，因此可以继续输出endl 否则会报错--链式编程思维
//}
//
//int main()
//{
//	test01();
//	return 0;
//}
////重载左移运算符配合友元可以实现输出自定义数据类型



//递增运算符重载 ++
class MyInteger
{
public:
	int m_Num;
	MyInteger()
	{
		m_Num = 0;
	}

	//前置++
	MyInteger& operator++()
	{
		//先++
		m_Num++;
		//后返回
		return *this;
	}

	//后置++
	MyInteger operator++(int)//int 是占位函数 用来区分前置和后置
	{
		//先记录当前结果
		MyInteger myint = *this;
		//再++
		m_Num++;
		//最后返回记录结果
		return myint;
	}
};

ostream& operator<<(ostream& out, MyInteger myint)
{
	out << myint.m_Num;
	return out;
}


//前置++，先++ 再返回
void test01()
{
	MyInteger myint;
	cout <<++myint << endl;
	cout << myint << endl;
}

//后置++，先返回 再++
void test02()
{
	MyInteger myint;
	cout << myint++ << endl;
	cout << myint << endl;

}

int main()
{
	test01();
	test02();
	return 0;
}
//前置递增返回的是引用，后置递增返回的是值
